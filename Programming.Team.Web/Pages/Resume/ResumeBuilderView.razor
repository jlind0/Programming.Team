@page "/resume/builder"
@inherits ReactiveInjectableComponentBase<ResumeBuilderViewModel>
@attribute [Authorize]
@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5" Class="text-primary">AI Resume Builder</MudText>
                <MudText >Create a tailored resume in minutes</MudText>
            </MudCardHeader>

            <MudCardContent>
            <!-- Form Section -->
            <div class="space-y-6">
                <MudGrid Spacing="3" >
                    <MudItem xs="12">
                        <MudStack Row="true">
                            <MudTextField @bind-Value="ViewModel.Name"
                                        Label="Posting Name"
                                        Variant="Variant.Outlined"
                                        AdornmentIcon="@Icons.Material.Filled.Person"
                                        Class="rounded-lg" />
                        
                                <div class="resumeDiv">
                                    <MudButton OnClick="ViewModel.ExtractTitle.BindCommand<MouseEventArgs>()"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               Class="fw-bold px-6 py-3">Extract Name</MudButton>
                                    <MudTooltip Text="The Percentage Match Required from a JD to Display a Position" Placement="MudBlazor.Placement.Right">
                                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Dark" Class="position-info-button" />
                                    </MudTooltip>
                                </div>
                        </MudStack>
                            
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Lines="8"
                                        @bind-Value="ViewModel.PostingText"
                                        Label="Job Description or Requirements"
                                        Variant="Variant.Outlined"
                                        AdornmentIcon="@Icons.Material.Filled.Description"
                                        Class="rounded-lg" />
                    </MudItem>

                    <MudItem xs="12">
                        <ResumeConfigurationView ViewModel="ViewModel.Configuration" />
                    </MudItem>
                </MudGrid>
            </div>
        </MudCardContent>

        <MudCardActions Class="justify-center py-4">
            <MudButton OnClick="ViewModel.Build.BindCommand<MouseEventArgs>()"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Size="Size.Large"
                        EndIcon="@Icons.Material.Filled.Build"
                        Class="px-10 py-4 rounded-full text-lg font-bold shadow-lg hover:shadow-xl transition-all">
                BUILD RESUME
            </MudButton>
        </MudCardActions>
    </MudCard>

        <!-- Loading Overlay -->

        <MudOverlay @bind-Visible="ViewModel.IsOverlayOpen"
                    DarkBackground="true"
                    AutoClose="false"
                    Class="fullscreen-overlay"
                    Style="z-index: 10000;">
            <div class="text-center">
                <MudProgressCircular Color="Color.Info"
                                     Indeterminate="true"
                                     Size="@Size.Large" />
                <MudText Typo="Typo.h5" Color="Color.Info" Class="animate-pulse">
                    @ViewModel.Progress
                </MudText>
                <MudText  Class="mt-2 overlayText">
                    This usually takes 20-40 seconds
                </MudText>
            </div>
        </MudOverlay>
    </MudContainer>

  
}
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();

        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
