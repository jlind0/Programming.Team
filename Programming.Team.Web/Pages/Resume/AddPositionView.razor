@inherits ReactiveComponentBase<AddPositionViewModel>

<style>

</style>

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudDialog @bind-Visible="ViewModel.IsOpen" 
        MaxWidth="MaxWidth.Medium" 
        FullWidth="true" 
        Class="px-4 pt-4 popover-z"
        >
    <DialogContent>
        <div class="d-flex flex-column">
            <div class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Close"
                               OnClick="() => ViewModel.IsOpen = false"
                               Color="Color.Default"
                               Class="ml-auto" />
            </div>
            <MudStepper ActiveStepIndex="@activeStepIndex">
                <!-- Step 1: Company Details -->
                <MudStep Title="Company" HasError="step1Error">
                    <MudStack Spacing="3">
                        <SearchSelectEntityView TAddView="AddCompanyView"
                                                TEntity="Company" TKey="Guid" TAddViewModel="AddCompanyViewModel"
                                                TSearchSelectViewModel="SearchSelectCompanyViewModel"
                                                ViewModel="ViewModel.CompanyViewModel" />
                    </MudStack>
                </MudStep>

                <!-- Step 2: Position Details -->
                <MudStep Title="Position" Disabled="step1Error">
                    <MudStack Spacing="3">
                        <MudTextField T="string"
                                      Label="Title"
                                      @bind-Value="ViewModel.Title"
                                      Variant="Variant.Outlined" />

                        <div class="d-flex gap-3">
                            <MudDatePicker @bind-Date="ViewModel.StartDateTime"
                                           Label="Start Date"
                                           MinDate="new DateTime(1950, 1, 1)"
                                               Class="flex-grow-1" />
                            <MudDatePicker @bind-Date="ViewModel.EndDateTime"
                                                Label="End Date"
                                                MinDate="new DateTime(1950, 1, 1)"
                                            Class="flex-grow-1" />
                        </div>

                            <SmartTextEditor TViewModel="AddPositionViewModel" ViewModel="ViewModel.SmartText" />

                        <MudTextField @bind-Value="ViewModel.SortOrder"
                                      Label="Sort Order"
                                      Variant="Variant.Outlined" />
                        <div class="step-actions">

                            <div>

                                <MudButton Class="completeButtonPosition"
                                           OnClick="ViewModel.Add.BindCommand<MouseEventArgs>()">
                                    Complete
                                </MudButton>
                            </div>
                        </div>
                    </MudStack>
                </MudStep>
            </MudStepper>

        </div>
        </DialogContent>
        @*</MudPopover> *@
    </MudDialog>
}

@code {
    private bool step1Error = true;
    private readonly CompositeDisposable Disposables = new CompositeDisposable();

    // Stepper control
    private int activeStepIndex = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ViewModel != null)
        {
            await ViewModel.Init.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.CompanyViewModel.WhenPropertyChanged(p => p.Selected).Subscribe(p =>
            {
                if (p.Sender.Selected != null)
                {
                    step1Error = false;
                }
                else
                {
                    step1Error = true;
                    activeStepIndex = 0; // Reset to first step
                }
                StateHasChanged();
            }).DisposeWith(Disposables);
        }
        base.OnInitialized();
    }
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Disposables.Dispose();
        }
        base.Dispose(disposing);
    }
}
