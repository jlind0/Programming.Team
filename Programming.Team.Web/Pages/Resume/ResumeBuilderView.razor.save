@page "/resume/builder"

@inject IJSRuntime JSRuntime
@inherits ReactiveInjectableComponentBase<ResumeBuilderViewModel>
@attribute [Authorize]

@if (ViewModel != null)
{
    <AlertView Alert="ViewModel.Alert" />
    <MudTextField @bind-Value="ViewModel.Name" Label="Name" Variant="Variant.Outlined" />
    <MudSelect Label="Document Template" T="DocumentTemplate" @bind-Value="ViewModel.SelectedTemplate"
        ToStringFunc="e => e?.Name">
        @foreach (var doctype in ViewModel.DocumentTemplates)
        {
            <MudSelectItem T="DocumentTemplate" Value="doctype">@doctype.Name</MudSelectItem>
        }
    </MudSelect>
    <MudTextField Lines="10" @bind-Value="ViewModel.PostingText" Label="Posting Text" Variant="Variant.Outlined" />
    <ResumeConfigurationView ViewModel="ViewModel.Configuration" />
    <MudButton OnClick="ViewModel.Build.BindCommand<MouseEventArgs>()" Class="fw-bold" Variant="Variant.Filled"
        Color="Color.Primary">Build Resume</MudButton>
    <MudOverlay @bind-Visible="ViewModel.IsOverlayOpen" DarkBackground="true" AutoClose="false">
        <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" />
        <h1>
            <MudText Color="Color.Secondary">@ViewModel.Progress</MudText>
        </h1>
    </MudOverlay>
}
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();

        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
