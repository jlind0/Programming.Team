@page "/"
@inherits ReactiveInjectableComponentBase<IndexViewModel>
@inject AuthenticationStateProvider authenticationProvider

@if (ViewModel != null)
{
    <MudStack>
         <!-- Hero Section -->
        <MudGrid Class="hero">
            <MudItem xs="12" md="12">
                <MudPaper Class="hero-content" Elevation="0">
                    <h2>The Resume Tailor</h2>
                    <p class="hero-text">Transform your resume into a perfect match for any job with our AI-powered tailoring technology.</p>
                    @*<div class="hero-buttons">
                        <MudButton Variant="Variant.Filled" Class="btn-primary" EndIcon="@Icons.Material.Filled.Rocket">Get Started</MudButton>
                        <MudButton Variant="Variant.Outlined" Class="btn-secondary" EndIcon="@Icons.Material.Filled.Info">Learn More</MudButton>
                    </div>*@
                    <IndexCarousel ViewModel="ViewModel" />
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudSpacer/>
        <!-- Features Section -->
        <MudGrid Class="justify-center features">
            <MudItem xs="16" md="4" >
                <MudPaper Class="feature-card" Elevation="1" Style="background-color:white;">
                    <div class="feature-icon"><MudIcon Icon="@Icons.Material.Filled.Scoreboard" /></div>
                    <h3>Free Usage</h3>
                    <p>First 15 tailored resume generations are free upon signup. No credit card required.</p>
                </MudPaper>
            </MudItem>
            <MudItem xs="16" md="3">
                <MudPaper Class="feature-card" Elevation="1" Style="background-color:white;">
                    <div class="feature-icon"><MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" /></div>
                    <h3>PDF & LaTeX</h3>
                    <p>Edit the underlying LaTeX code and re-render new PDFs at no additional cost.</p>
                </MudPaper>
            </MudItem>
            <MudItem xs="16" md="3">
                <MudPaper Class="feature-card" Elevation="1" Style="background-color:white;">
                    <div class="feature-icon"><MudIcon Icon="@Icons.Material.Filled.Memory" /></div>
                    <h3>AI-Powered</h3>
                    <p>Our algorithms analyze job descriptions to highlight your most relevant skills.</p>
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudSpacer/>
        <!-- Pricing Section -->
        <MudContainer Class="pricing">
            <h2 class="section-title">Resume Generation Packages</h2>
            <div class="pricing-cards">
                @foreach (var package in ViewModel.Packages)
                {
                    string packageClass = package == ViewModel.Packages.First() ?
                    "pricing-card popular" : "pricing-card";

                    <MudCard Class="@packageClass">
                        <MudCardHeader Class="pricing-header">
                            <MudStack>
                                <h3>@package.Name</h3>
                                <div class="price">$@package.Price?.ToString("F2")</div>
                                <div class="frequency">for @package.ResumeGenerations resumes</div>
                            </MudStack>
                        </MudCardHeader>
                        <MudCardContent>
                            <ul class="pricing-features">
                                <li><MudIcon Icon="@Icons.Material.Filled.Check" /> @package.ResumeGenerations Resume Generations</li>
                                <li><MudIcon Icon="@Icons.Material.Filled.Check" /> LaTeX Source Files</li>
                                <li><MudIcon Icon="@Icons.Material.Filled.Check" /> Unlimited PDF Downloads</li>
                                <li><MudIcon Icon="@Icons.Material.Filled.Check" /> Priority Support</li>
                            </ul>
                        </MudCardContent>
                        <MudCardActions>
                            @if (isAuthenticated)
                            {
                                <MudButton Class="btn-pricing"
                                           OnClick="() => package.Purchase.Execute()"
                                           FullWidth="true">
                                    Choose Plan
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                }
            </div>
        </MudContainer>
        <MudSpacer/>
        <!-- CTA Section -->
        <MudGrid Class="cta">
            <MudItem xs="16" md="6">
                <MudPaper Elevation="0" Class="cta-content" Style="padding: 2rem; text-align: center;color:white;">
                    <MudText Typo="Typo.h4" GutterBottom="true">Ready to Transform Your Resume?</MudText>
                    <MudText Typo="Typo.body1" Class="mb-4">
                        Join other professionals who landed their dream jobs with perfectly tailored resumes.
                    </MudText>
                    @if (!isAuthenticated)
                    {
                        <MudButton Href="MicrosoftIdentity/Account/SignIn" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowRight" Class="btn-cta">
                            Start Free Trial
                        </MudButton>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="16" md="5">
                <MudGrid Class="cta-stats">
                    <MudItem xs="16" md="3" Class="stat-item">
                        <MudText Typo="Typo.h5" Class="stat-number">@ViewModel.PostingCount</MudText>
                        <MudText Typo="Typo.subtitle2" Class="stat-label">Resumes Generated</MudText>
                    </MudItem>
                    <MudItem xs="16" md="3" Class="stat-item">
                        <MudText Typo="Typo.h5" Class="stat-number">92%</MudText>
                        <MudText Typo="Typo.subtitle2" Class="stat-label">Satisfaction Rate</MudText>
                    </MudItem>
                    <MudItem xs="16" md="3" Class="stat-item">
                        <MudText Typo="Typo.h5" Class="stat-number">3.5x</MudText>
                        <MudText Typo="Typo.subtitle2" Class="stat-label">More Interviews</MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>

        </MudGrid>
        <MudSpacer />

        <!-- FAQ Section -->
        @if(ViewModel.FAQs.Count > 0)
        {
        <MudContainer>
            <h2 class="section-title">Frequently Asked Questions</h2>

            <MudGrid Class="faq-grid">
                @foreach (var faqGroup in ViewModel.FAQs.ToList().Chunk(FAQGroupSize))
                {
                    <MudItem>
                        <MudExpansionPanels Class="home-page-faq-panel">
                                @foreach (var faq in faqGroup)
                                {
                                    <MudExpansionPanel Text="@faq.Question">
                                        @faq.Answer
                                    </MudExpansionPanel>
                                }
                        </MudExpansionPanels>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
        }
        <!-- Contact Form Section -->
       @* <div class="contact-container">
            <!-- Decorative elements -->
            <div class="contact-decoration decoration-1"></div>
            <div class="contact-decoration decoration-2"></div>

            <!-- Header -->
            <div class="contact-header">
              
                <h2 class="section-title">Have Questions? Contact Us!</h2>
            </div>

            <!-- Form -->
            <div class="contact-body">
                <div class="contact-form">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <MudCard>
                                <MudCardContent>
                                    <MudForm @ref="contactForm" Model="@contactModel">
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <label class="mud-input-label">Email Address</label>
                                                <MudTextField @bind-Value="contactModel.Email"
                                                              Required="true"
                                                              RequiredError="Email is required"
                                                              Validation="@(new Func<string, bool>(ValidateEmail))"
                                                              For="@(() => contactModel.Email)"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense" />
                                            </MudItem>
                                            <MudItem xs="12" Class="mt-4">
                                                <label class="mud-input-label">Your Question</label>
                                                <MudTextField @bind-Value="contactModel.Question"
                                                              Lines="5"
                                                              Required="true"
                                                              RequiredError="Please enter your question"
                                                              Variant="Variant.Outlined"
                                                              Multiline="true"
                                                              Margin="Margin.Dense" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudForm>
                                </MudCardContent>
                                <MudCardActions Class="justify-end">
                                    <MudButton Class="fw-bold" Href="MicrosoftIdentity/Account/SignOut" Variant="Variant.Filled" onclick="SubmitQuestion()"
                                               Color="Color.Primary">
                                        Send Question
                                    </MudButton>
                                
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </div>
            </div>
        </div>*@

        
        <MudText Typo="Typo.body1">
            <MudAlert Severity="Severity.Normal">
                If you’re interested in becoming a recruiter on the platform, please contact
                <MudLink Class="fw-bold" Href="mailto:jason@groundbreaker.solutions" Target="_blank" Typo="Typo.body2"
                         Color="Color.Primary">
                    jason@groundbreaker.solutions
                </MudLink>
            </MudAlert>
        </MudText>
    </MudStack>
}

@code{
        /*private class ContactModel
        {
            public string Email { get; set; }
    public string Question { get; set; }
        }

        private ContactModel contactModel = new ContactModel();
    private MudForm contactForm;*/

    private int FAQGroupSize = 3;
    private bool isAuthenticated = false;
    protected override async Task OnInitializedAsync()
    {
    var state = await authenticationProvider.GetAuthenticationStateAsync();
    isAuthenticated = state?.User?.Identity?.IsAuthenticated ?? false;
    await base.OnInitializedAsync();
    }
    protected override void OnInitialized()
    {

        if (ViewModel != null)
        {
            ViewModel.Packages.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
            ViewModel.FAQs.CollectionChanged += (s, e) =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModel != null && firstRender)
        {
            await ViewModel.Load.Execute().GetAwaiter();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    /*
    private bool ValidateEmail(string email)
    {
        return !string.IsNullOrWhiteSpace(email) && email.Contains("@");
    }


    private void SubmitQuestion()
    {

    }*/

}