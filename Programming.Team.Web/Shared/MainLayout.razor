@using System.Reflection
@inherits ReactiveLayoutComponentBase<LayoutViewModel>
@inject NavigationManager NavMan
@inject IServiceProvider ServiceProvider
@inject IDialogService Dialog

<PageTitle>Jobeme.Today - The Resume Tailor</PageTitle>

<MudThemeProvider Theme="_theme" />

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider /> 
<MudBreakpointProvider />
@*<MudToggleIconButton @bind-Toggled="@_isDarkMode"  
                     Icon="@Icons.Material.Filled.DarkMode" Color="@Color.Default"
                     ToggleIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Default"
                     Class ="toggleButtonPosition"></MudToggleIconButton>*@
<MudLayout>
    <!-- Mobile View (sm and down) -->
    <MudHidden HiddenChanged="hdn => _drawerOpen = !hdn" Breakpoint="@mobileBreakPoint" Invert="true">
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                           OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">
                <MudIcon Icon="@Icons.Material.Filled.CodeOff" Class="mr-2" />
                <MudText Inline="true" Typo="Typo.h5" Class="logo-text">Jobeme.</MudText>
                <MudText Inline="true" Typo="Typo.h5" Class="secondary-logo-text" Color="Color.Primary">Today</MudText>
            </MudText>
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>

        <MudMainContent Class="main-content">
            <MudContainer Class="d-flex flex-column justify-center align-center" Style="height: 80vh;">
                <MudText Typo="Typo.h4" Class="mb-4 text-center">Please view on a larger device</MudText>
                <MudIcon Icon="@Icons.Material.Filled.Devices" Size="Size.Large" Color="Color.Primary" />
            </MudContainer>
            <Footer />
        </MudMainContent>
    </MudHidden>

    <!-- Desktop View (md and up) -->
    <MudHidden Breakpoint="@mainBreakPoint" Invert="true">
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                           OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">
                <MudIcon Icon="@Icons.Material.Filled.CodeOff" Class="mr-2" />
                <MudText Inline="true" Typo="Typo.h5" Class="logo-text">Jobme.</MudText>
                <MudText Inline="true" Typo="Typo.h5" Class="secondary-logo-text" Color="Color.Primary">Today</MudText>
            </MudText>
            <MudSpacer />
            @if(ViewModel != null)
            {
                <AlertView Alert="ViewModel.Alert" />
                @if(!string.IsNullOrWhiteSpace(ViewModel.Page.Markdown) || !string.IsNullOrWhiteSpace(ViewModel.Page.VideoEmbed))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Inherit"
                                   OnClick="ViewModel.Page.ToggleOpen.BindCommand<MouseEventArgs>()"/>
                    <RenderPageHeader ViewModel="ViewModel.Page" />
                    <MudSpacer />
                }
                    
            }
            <LoginDisplay />
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu/>
        </MudDrawer>
  
        <MudMainContent Class="main-content">
          @*  <MudDialogProvider />*@
            @Body
            <Footer />

        </MudMainContent>
       
    </MudHidden>
 
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private MudTheme? _theme = null;
    private Breakpoint mobileBreakPoint = Breakpoint.SmAndDown;
    private Breakpoint mainBreakPoint = Breakpoint.MdAndUp;
    private bool _isDarkMode = false;
    [CascadingParameter] private RouteData? RouteData { get; set; }
/*    MudTheme CustomTheme = new MudTheme
        {
            PaletteLight = new PaletteLight()
    {
        Primary = Colors.Blue.Default,       // Primary brand color
                Secondary = Colors.Teal.Default,     // Secondary accent color
                Tertiary = Colors.Orange.Default,    // Additional accent color
                Background = Colors.Gray.Lighten5,   // Page background
                AppbarBackground = Colors.Blue.Darken1, // App bar background
                DrawerBackground = Colors.Lime.Lighten1,     // Drawer background
              //  Surface = Colors.Lime.Lighten1,              // Cards, sheets, menus
                TextPrimary = Colors.Gray.Darken4,   // Primary text
                TextSecondary = Colors.Gray.Darken2, // Secondary text
                Success = Colors.Green.Default,      // Success states
                Warning = Colors.Orange.Default,    // Warning states
                Error = Colors.Red.Default,          // Error states
                Info = Colors.Blue.Default,          // Info states
            },
            PaletteDark = new PaletteDark()
    {
        Primary = Colors.Blue.Darken2,            // Strong but not too bright blue
                Secondary = Colors.Cyan.Darken2,           // Cool secondary color
                Tertiary = Colors.Amber.Darken2,           // Warm tertiary accent
                Background = "#121212",                     // Very dark background for body
                AppbarBackground = "#1E1E1E",               // Slightly lighter appbar
                DrawerBackground = "#1B1B1B",               // Dark drawer background
                Surface = "#242424",                        // Dark surface for cards and divs
                TextPrimary = Colors.Gray.Lighten4,        // Light text for readability
                TextSecondary = Colors.Gray.Lighten2,      // Softer secondary text
                Success = Colors.Green.Accent3,             // Bright success color
                Warning = Colors.Orange.Accent2,            // Clear warning color
                Error = Colors.Red.Accent2,                  // Vibrant error color
                Info = Colors.LightBlue.Accent2,             // Informational color
            }
    };

  */

    private readonly CompositeDisposable disposables = new CompositeDisposable();
    protected override void OnInitialized()
    {
    base.OnInitialized();

    _theme = LightGlassTheme;
    var relativePath = NavMan.ToBaseRelativePath(NavMan.Uri);

    if(relativePath == "/" || relativePath == "")
    {
        mobileBreakPoint = Breakpoint.None;
        mainBreakPoint = Breakpoint.Always;
    }
    ViewModel ??= ServiceProvider.GetRequiredService<LayoutViewModel>();
    ViewModel.Page.WhenAnyPropertyChanged().Subscribe(_ =>
        {
            StateHasChanged();
            }).DisposeWith(disposables);
    }
    
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                disposables.Dispose();
        }
            base.Dispose(disposing);
        }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (ViewModel == null)
            return;
        ViewModel.RouteTemplate = RouteData?.PageType
            .GetCustomAttributes<RouteAttribute>(false)
            .Select(r => r.Template)
            .FirstOrDefault();
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public static MudTheme LightGlassTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#3a56d4",             // Deep Blue
                PrimaryDarken = "#2f4ac0",       // Darker Blue
                Secondary = "#6c757d",           // Neutral Gray
                Tertiary = "#4cc9f0",            // Bright Cyan (Accent)
                Dark = "#212529",                // Almost Black
                TextPrimary = "#212529",         // Dark Text
                Background = "#f8f9fa",          // Light Gray Background
                Surface = "rgba(255,255,255,0.9)", // Slightly transparent white
                AppbarBackground = "rgba(255,255,255,0.85)",
                DrawerBackground = "rgba(245,245,245,0.8)",
                AppbarText = "#212529",
                DrawerText = "#212529",
                Success = "#4bbf73",             // Green
                Warning = "#f0ad4e",             // Yellow-Orange
                Error = "#d9534f",               // Red
                Info = "#5bc0de"                 // Light Blue
            },
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "8px",
                DrawerWidthLeft = "280px"
            }
        };


}
